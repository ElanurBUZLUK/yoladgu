"""
Comprehensive type stubs for SQLAlchemy
"""

from typing import Any, Optional, Union, List, Dict, TypeVar, Generic, Callable

# Core SQLAlchemy functions
def select(*args: Any) -> Any: ...
def and_(*args: Any) -> Any: ...
def or_(*args: Any) -> Any: ...
def func() -> Any: ...
def text(text: str) -> Any: ...
def desc(column: Any) -> Any: ...
def asc(column: Any) -> Any: ...

# SQLAlchemy version
__version__: str

# Type variables
T = TypeVar('T')

# Base classes
class Base:
    pass

# Session classes
class Session:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def add(self, instance: Any) -> None: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def close(self) -> None: ...
    def query(self, *args: Any) -> Any: ...

class AsyncSession:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def execute(self, statement: Any) -> Any: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...
    async def add(self, instance: Any) -> None: ...

# Engine classes
class Engine:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def connect(self) -> Any: ...
    def dispose(self) -> None: ...

class AsyncEngine:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def connect(self) -> Any: ...
    async def dispose(self) -> None: ...

# Connection classes
class Connection:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def execute(self, statement: Any) -> Any: ...
    def commit(self) -> None: ...
    def rollback(self) -> None: ...
    def close(self) -> None: ...

class AsyncConnection:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    async def execute(self, statement: Any) -> Any: ...
    async def commit(self) -> None: ...
    async def rollback(self) -> None: ...
    async def close(self) -> None: ...

# Column and table definitions
def Column(*args: Any, **kwargs: Any) -> Any: ...
def ForeignKey(*args: Any, **kwargs: Any) -> Any: ...
def relationship(*args: Any, **kwargs: Any) -> Any: ...

# Exceptions
class SQLAlchemyError(Exception): ...
class IntegrityError(SQLAlchemyError): ...
class DisconnectionError(SQLAlchemyError): ...
class NoResultFound(SQLAlchemyError): ...
class MultipleResultsFound(SQLAlchemyError): ...

# Utility functions
def create_engine(*args: Any, **kwargs: Any) -> Engine: ...
def create_async_engine(*args: Any, **kwargs: Any) -> AsyncEngine: ...
def sessionmaker(*args: Any, **kwargs: Any) -> Callable: ...
def async_sessionmaker(*args: Any, **kwargs: Any) -> Callable: ...
